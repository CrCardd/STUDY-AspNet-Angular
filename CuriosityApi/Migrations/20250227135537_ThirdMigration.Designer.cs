// <auto-generated />
using System;
using CuriosityApi.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CuriosityApi.Migrations
{
    [DbContext(typeof(CuriosityDbContext))]
    [Migration("20250227135537_ThirdMigration")]
    partial class ThirdMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CuriosityApi.Entities.ApplicationCart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Activate")
                        .HasColumnType("bit");

                    b.Property<Guid>("IdUser")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("IdUser");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("CuriosityApi.Entities.ApplicationChat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdProduct")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserAId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserBId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("IdProduct");

                    b.HasIndex("UserAId")
                        .IsUnique();

                    b.HasIndex("UserBId")
                        .IsUnique();

                    b.ToTable("Chats");
                });

            modelBuilder.Entity("CuriosityApi.Entities.ApplicationFollow", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FollowedId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FollowerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("FollowedId");

                    b.HasIndex("FollowerId");

                    b.ToTable("ApplicationFollow");
                });

            modelBuilder.Entity("CuriosityApi.Entities.ApplicationMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ChatId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ReceiverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("ReceiverId")
                        .IsUnique();

                    b.HasIndex("SenderId")
                        .IsUnique();

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("CuriosityApi.Entities.ApplicationProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ApplicationCartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationCartId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("CuriosityApi.Entities.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CuriosityApi.Entities.ApplicationCart", b =>
                {
                    b.HasOne("CuriosityApi.Entities.ApplicationUser", "User")
                        .WithMany("Carts")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CuriosityApi.Entities.ApplicationChat", b =>
                {
                    b.HasOne("CuriosityApi.Entities.ApplicationProduct", "Product")
                        .WithMany("Chat")
                        .HasForeignKey("IdProduct")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CuriosityApi.Entities.ApplicationUser", "UserA")
                        .WithOne()
                        .HasForeignKey("CuriosityApi.Entities.ApplicationChat", "UserAId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CuriosityApi.Entities.ApplicationUser", "UserB")
                        .WithOne()
                        .HasForeignKey("CuriosityApi.Entities.ApplicationChat", "UserBId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("UserA");

                    b.Navigation("UserB");
                });

            modelBuilder.Entity("CuriosityApi.Entities.ApplicationFollow", b =>
                {
                    b.HasOne("CuriosityApi.Entities.ApplicationUser", "Followed")
                        .WithMany("Followers")
                        .HasForeignKey("FollowedId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CuriosityApi.Entities.ApplicationUser", "Follower")
                        .WithMany("Following")
                        .HasForeignKey("FollowerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Followed");

                    b.Navigation("Follower");
                });

            modelBuilder.Entity("CuriosityApi.Entities.ApplicationMessage", b =>
                {
                    b.HasOne("CuriosityApi.Entities.ApplicationChat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CuriosityApi.Entities.ApplicationUser", "Receiver")
                        .WithOne()
                        .HasForeignKey("CuriosityApi.Entities.ApplicationMessage", "ReceiverId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CuriosityApi.Entities.ApplicationUser", "Sender")
                        .WithOne()
                        .HasForeignKey("CuriosityApi.Entities.ApplicationMessage", "SenderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("CuriosityApi.Entities.ApplicationProduct", b =>
                {
                    b.HasOne("CuriosityApi.Entities.ApplicationCart", null)
                        .WithMany("Products")
                        .HasForeignKey("ApplicationCartId");

                    b.HasOne("CuriosityApi.Entities.ApplicationUser", "Owner")
                        .WithMany("Products")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("CuriosityApi.Entities.ApplicationCart", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("CuriosityApi.Entities.ApplicationChat", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("CuriosityApi.Entities.ApplicationProduct", b =>
                {
                    b.Navigation("Chat");
                });

            modelBuilder.Entity("CuriosityApi.Entities.ApplicationUser", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("Followers");

                    b.Navigation("Following");

                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
